{"version":3,"sources":["components/FlatBtn.js","EtherNote.js","components/TextEdit.js","components/SelectorBtn.js","components/NoteSelector.js","App.js","index.js"],"names":["FlatBtn","props","borderRadius","bg","border","boxShadow","_hover","_focus","_active","children","ethUtil","require","sigUtil","walletAddr","contract","EtherNote","useState","connected","setConnected","currNoteInd","setCurrNoteInd","notes","setNotes","ipfs","create","connectWallet","a","window","ethereum","isMetaMask","request","method","res","handleAccountChange","console","log","addr","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","EtherNote_abi","getNotes","on","location","reload","saveNotes","params","pubKey","encryptedMessage","bufferToHex","Buffer","from","JSON","stringify","encrypt","publicKey","data","version","add","cid","hash","toString","set","get","fetch","text","val","decryptedMessage","parse","maxW","h","pt","justify","align","mb","p","as","onClick","mr","substring","currNote","mt","TextEdit","w","direction","value","onChange","event","prev","temp","target","resize","SelectorBtn","title","radioProps","useRadio","getInputProps","state","getCheckboxProps","input","checkbox","cursor","borderBottom","_checked","color","px","py","inputVal","parseInt","splice","NoteSelector","useRadioGroup","defaultValue","i","setValue","getRootProps","getRadioProps","useEffect","noteList","map","el","iStr","radio","split","key","overflowY","borderRight","len","length","push","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e09ebb72.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@chakra-ui/react'\n\nexport default function FlatBtn(props) {\n  return (\n    <Button\n        {...props}\n        borderRadius='0'\n        bg=\"transparent\"\n        border=\"1px solid black\"\n        boxShadow=\"4px 4px black\"\n        _hover={{\n            boxShadow: \"none\",\n        }}\n        _focus={{}}\n        _active={{}}\n    >{props.children}</Button>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Container, Box, Flex, Text, Heading, Spacer} from '@chakra-ui/react'\nimport NoteSelector from './components/NoteSelector';\nimport TextEdit from './components/TextEdit';\nimport FlatBtn from './components/FlatBtn';\n\nimport { ethers } from 'ethers'\nimport EtherNote_abi from './contracts/EtherNote_abi.json'\nimport { create } from 'ipfs-http-client'\n\nconst ethUtil = require('ethereumjs-util');\nconst sigUtil = require('@metamask/eth-sig-util');\n\nconst contractAddress = '0xf6ea1d9a263bb96b0d22c1689469ee6402590a44';\nvar walletAddr = \"\";\nvar contract = null;\n\nexport default function EtherNote() {\n    const [connected, setConnected] = useState(false);\n    const [currNoteInd, setCurrNoteInd] = useState(0);\n    const [notes, setNotes] = useState([\"My First Note\"]);\n\n    const ipfs = create(\"https://ipfs.infura.io:5001\");\n\n\tconst connectWallet = async () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconst res = await window.ethereum.request({ method: 'eth_requestAccounts'});\n\t\t\thandleAccountChange(res[0]);\n            setConnected(true);\n\t\t} else {\n\t\t\tconsole.log('Please Install MetaMask');\n\t\t}\n\t}\n\n\tconst handleAccountChange = async (addr) => {\n        walletAddr = addr\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tconst signer = provider.getSigner();\n        contract = new ethers.Contract(contractAddress, EtherNote_abi, signer);\n        \n        getNotes();\n\t}\n\n\tconst handleChainChange = () => {\n\t\twindow.location.reload();\n\t}\n\n    if (window.ethereum) {\n        window.ethereum.on('accountsChanged', handleAccountChange);\n\t    window.ethereum.on('chainChanged', handleChainChange);\n    }\n\n\tconst saveNotes = async () => {\n        const pubKey = await window.ethereum.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [walletAddr],\n        });\n\n        const encryptedMessage = ethUtil.bufferToHex(\n            Buffer.from(\n              JSON.stringify(\n                sigUtil.encrypt({\n                  publicKey: pubKey,\n                  data: JSON.stringify({notes: notes}),\n                  version: 'x25519-xsalsa20-poly1305',\n                })\n              ),\n              'utf8'\n            )\n        );\n\n        const { cid } = await ipfs.add(encryptedMessage);\n        const hash = cid.toString()\n        contract.set(hash);\n        console.log(hash);\n        console.log(encryptedMessage);\n\t}\n\n\tconst getNotes = async () => {\n\t\tconst hash = await contract.get();\n        console.log(hash);\n\n        if (hash != \"User not found\") {\n            const res = await fetch(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\" + hash, {method: 'POST'})\n            const val = await res.text()\n\n            const decryptedMessage = await window.ethereum.request({\n                method: 'eth_decrypt',\n                params: [val, walletAddr],\n            })\n            \n            console.log(decryptedMessage)\n            setNotes(JSON.parse(decryptedMessage).notes);\n        }\n\t}\n\n    const TopBtns = () => {\n        if (connected) {\n            return (\n                <>\n                    <FlatBtn onClick={saveNotes} mr=\"4px\">Save All Changes</FlatBtn>\n                    <FlatBtn onClick={connectWallet}>{walletAddr.substring(0, 12)}</FlatBtn>\n                </>\n            );\n        }\n\n        return <FlatBtn onClick={connectWallet}>Connect Wallet</FlatBtn>;\n    } \n    \n\t\n\treturn (\n        <Container bg=\"\" maxW=\"1000px\" h=\"100%\" pt=\"15px\">\n            <Flex justify='space-between' align=\"flex-end\" mb=\"10px\">\n                <Box p=\"3px\" border=\"1px solid black\" boxShadow=\"4px 4px black\">\n                    <Heading as=\"h1\">Ethernote</Heading>\n                </Box>\n                <Box>\n                    {TopBtns()}\n                </Box>\n            </Flex>\n            <Flex bg=\"\" h=\"90%\" border=\"1px solid black\" boxShadow=\"6px 6px black\">\n                <NoteSelector notes={notes} setNotes={setNotes} currNoteInd={currNoteInd} setCurrNoteInd={setCurrNoteInd} />\n                <TextEdit notes={notes} setNotes={setNotes} currNoteInd={currNoteInd} currNote={notes[currNoteInd]} />\n            </Flex>\n            <Text align=\"center\" mt=\"10px\">&copy; 2022 with ♥ by Gary Peng</Text>\n        </Container>\n\t);\n}","import React from 'react'\nimport { Flex, Button, Textarea } from '@chakra-ui/react'\n\nexport default function TextEdit(props) {\n    const handleTextChange = (event) => {\n        props.setNotes((prev) => {\n            const temp = [...prev];\n            temp[props.currNoteInd] = event.target.value\n            return temp\n        })\n\n        // console.log(props.notes)\n    }\n\n    return (\n        <Flex bg=\"\" w=\"70%\" h=\"100%\" direction=\"column\">\n            <Textarea \n                value={props.currNote}\n                onChange={handleTextChange}\n                w=\"100%\"\n                h=\"100%\"\n                borderRadius='0'\n                border=\"null\"\n                _focus={{}}\n                _hover={{}}\n                resize=\"none\"\n            />\n        </Flex>\n    );\n}\n","import React, { useState } from 'react';\nimport { Flex, Box, useRadio, Button } from '@chakra-ui/react';\nimport { CloseIcon } from '@chakra-ui/icons';\n\nexport default function SelectorBtn(props) {\n    const { title, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps } = useRadio(radioProps)\n\n    const input = getInputProps()\n    const checkbox = getCheckboxProps()\n\n    const deleteNote = () => {\n        const inputVal = parseInt(input.value);\n        if (inputVal <= props.currNoteInd && inputVal != 0) {\n            props.setCurrNoteInd(props.currNoteInd-1);\n        }\n        \n        props.setNotes((prev) => {\n            const temp = [...prev];\n            temp.splice(inputVal, 1);\n            return temp\n        })\n    }\n\n    return (   \n        <Flex\n            as='label'\n            {...checkbox}\n            cursor='pointer'\n            borderBottom=\"1px solid black\"\n            _checked={{\n                bg: 'black',\n                color: 'white',\n                border: null,\n            }}\n            px={5}\n            py={3}\n            justify='space-between'\n        >\n            <input {...input} />\n            {title}\n            <Button \n                onClick={deleteNote}\n                bg=\"transparent\"\n                border={null}\n                _hover={{}}\n                _focus={{}}\n                _active={{}}\n            ><CloseIcon /></Button>\n        </Flex>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { Button, Flex, useRadioGroup  } from '@chakra-ui/react';\nimport SelectorBtn from './SelectorBtn';\nimport { AddIcon } from '@chakra-ui/icons';\n\nexport default function NoteSelector(props) {\n    const { value, setValue, getRootProps, getRadioProps } = useRadioGroup({\n        defaultValue: \"0\",\n        onChange: (i) => props.setCurrNoteInd(parseInt(i)),\n    })\n\n    useEffect(() => {\n        setValue(props.currNoteInd + \"\");\n    }, [props.currNoteInd]);\n\n    const noteList = props.notes.map((el, i) => {\n        const iStr = i.toString();\n        const radio = getRadioProps({ value:iStr })\n\n        const title = el.substring(0, 20).split(\"\\n\")[0]\n\n        return (\n            <SelectorBtn {...props} key={iStr} title={title} {...radio} />\n        )\n    });\n\n    const newNote = () => {\n        const len = props.notes.length\n        props.setNotes((prev) => {\n            const temp = [...prev];\n            temp.push(\"New Note\");\n            return temp\n        })\n        \n        props.setCurrNoteInd(len);\n    }\n\n    return (\n        <Flex w=\"30%\" h=\"100%\" direction=\"column\" overflowY=\"auto\" borderRight=\"1px solid black\" {...getRootProps()}>\n            {noteList}\n            <Button \n                onClick={newNote} \n                borderRadius='0'\n                bg=\"transparent\"\n                border={null}\n                _hover={{}}\n                _focus={{}}\n                _active={{}}\n            ><AddIcon /></Button>\n        </Flex>\n    )\n}\n","import { ChakraProvider } from '@chakra-ui/react'\nimport EtherNote from './EtherNote';\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <EtherNote />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}